Proxy Object provides a plcaeholder for another another object to control access to it.

Proxy is heavily used to implement lazy loading related user case.
   particepents-
               Subject ->this is the interface which expose the functionality available to be used by clients.
               Real  Subject->is a class implementting subject and its concrete implmentation which needs to be hidden
                  behind proxy.
               proxy- Hides the real object by extending it and clients communicate to real object via this proxy
               object.


//Example--> Spring @Transactional
                   It creates a proxy object on the method @Transaction applied.

                      example:
                          class DepartmentService{
                          @Transactional
                          pubic void createDepartment(Department dep){
                             Employee emp= new  Employee();
                                   departmentDao.create(dep);
                                   createEmployee(emp);
                          }

                       public void createEmployee(Employee emp){
                       empDao.createEmp(emp);

                       }
                    }

this will create a proxyclass like

                  class DepartmentServiceProxy extends DepartmentService{
                            pubic void createDepartment(Department dep){

                       UserTransaction usertransaction=entitymanager.getTransaction().begin;
                         super.departmentDao.create(dep);

                      UserTransaction usertransaction=entitymanager.getTransaction().commit;

                  }





